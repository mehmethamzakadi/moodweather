// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output yolunu standart hale getir
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js tabloları
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  spotifyId     String?   @unique
  
  // İlişkiler
  accounts      Account[]
  sessions      Session[]
  moodSessions  MoodSession[]
  playlists     PlaylistHistory[]
  preferences   UserPreference?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// MoodWeather özel tabloları
model MoodSession {
  id              String   @id @default(cuid())
  userId          String
  currentMood     String   // "tired, stressed"
  targetMood      String?  // "energetic, focused"
  moodScore       Int?     // 1-10 arası
  
  // Hava durumu verisi (JSON olarak saklanacak)
  weatherData     String?  // JSON string
  location        String?
  temperature     Float?
  weatherCondition String? // "sunny", "rainy", etc.
  
  // AI analizi sonuçları
  aiAnalysis      String?  // AI'nin mood analizi
  playlistStrategy String? // Playlist oluşturma stratejisi
  
  // Session detayları
  sessionDate     DateTime @default(now())
  sessionDuration Int?     // dakika cinsinden
  effectivenessRating Int? // 1-5 yıldız
  userFeedback    String?
  
  // İlişkiler
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlists       PlaylistHistory[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PlaylistHistory {
  id                String   @id @default(cuid())
  userId            String
  sessionId         String?  // Hangi mood session'a ait
  
  // Spotify playlist bilgileri
  spotifyPlaylistId String?  // Spotify'daki playlist ID
  playlistName      String
  trackCount        Int      @default(0)
  totalDuration     Int?     // toplam süre (saniye)
  
  // Playlist karakteristikleri
  averageEnergy     Float?   // 0-1 arası
  averageValence    Float?   // 0-1 arası (pozitiflik)
  averageTempo      Float?   // BPM
  genres            String?  // JSON array as string
  
  // Meta bilgiler
  generatedAt       DateTime @default(now())
  lastPlayedAt      DateTime?
  playCount         Int      @default(0)
  
  // İlişkiler
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session           MoodSession? @relation(fields: [sessionId], references: [id])
  tracks            PlaylistTrack[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PlaylistTrack {
  id                String   @id @default(cuid())
  playlistId        String
  
  // Spotify track bilgileri
  spotifyTrackId    String
  trackName         String
  artistName        String
  albumName         String?
  trackUrl          String?
  previewUrl        String?
  
  // Track özellikleri
  duration          Int?     // milisaniye
  energy            Float?   // 0-1
  valence           Float?   // 0-1
  tempo             Float?   // BPM
  danceability      Float?   // 0-1
  acousticness      Float?   // 0-1
  
  // Playlist içindeki sırası
  position          Int
  
  // İlişki
  playlist          PlaylistHistory @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
}

// Kullanıcı tercihleri ve öğrenme verisi
model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  
  // Müzik tercihleri
  favoriteGenres    String?  // JSON array
  preferredTempo    String?  // "slow", "medium", "fast"
  preferredEnergy   String?  // "low", "medium", "high"
  
  // Mood patterns
  commonMoods       String?  // JSON array - sık yaşanan mood'lar
  successfulStrategies String? // JSON - hangi stratejiler işe yaradı
  
  // Zaman tercihleri
  morningPreference String?  // sabah müzik tercihi
  eveningPreference String?  // akşam müzik tercihi
  
  // İlişki
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}